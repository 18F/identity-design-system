# Jobs defined here use the idp/ci docker image from ECR by default. 
# Images are built via the identity-devops GitLab pipeline.

variables:
  BUNDLER_VERSION: "2.3.13"
  NVM_VERSION: "v0.39.0"
  NODE_VERSION: "latest"
  ECR_REGISTRY: '${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com'
  IDP_WORKER_IMAGE_TAG: 'main'
  IDP_IMAGE_TAG: 'main'
  PKI_IMAGE_TAG: 'main'

stages:
  - lint
  - test
  - build
  - snapshot
  - visual_regression



default:
  image: '${ECR_REGISTRY}/dashboard/ci:latest'


before_script:
  - apt-get update
  - apt-get update && apt-get install -y gconf-service libasound2 libatk1.0-0 libc6 
    libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 
    libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 
    libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 
    libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 
    libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget
  - export BASH_ENV="$HOME/.bash.env"
  - gem install bundler --version $BUNDLER_VERSION
  - wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/$NVM_VERSION/install.sh | bash
  - export NVM_DIR="$HOME/.nvm"
  - . "$NVM_DIR/nvm.sh" --install --latest-npm
  - echo 'export NVM_DIR="$HOME/.nvm"' >> $BASH_ENV
  - echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
  - node -v


cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - .npm
    - .bundler

before_cache:
  script:
    - rm -f .bundler/ruby/2.6.0/cache/*.gem

.bundle_npm_install: &bundle_npm_install
  - bundle check --path ~/.bundler || bundle install --path ~/.bundler
  - npm ci

build-docs:
  script:
    - *bundle_npm_install
    - make -j2 build-assets build-docs

snapshot:
  script:
    - scripts/snapshot.js
  artifacts:
    paths:
      - tmp/screenshot/branches

lints:
  stage: lint
  script:
    - *bundle_npm_install
    - make lint

integration:
  stage: test
  script:
    - *bundle_npm_install
    - npm test 
  variables:
    SKIP_VISUAL_REGRESSION_TEST: "true"

snapshot-main:
  stage: snapshot
  script:
    - *bundle_npm_install
    - build-docs
    - snapshot


snapshot-branch:
  stage: snapshot
  script:
    - *bundle_npm_install
    - build-docs
    - snapshot


visual-regression:
  stage: visual_regression
  script:
    - *bundle_npm_install
    - cp -r tmp/screenshot/branches/* tmp/screenshot/branches/
    - npm test -- --no-sandbox

  artifacts:
    paths:
      - tmp/screenshot/diff
    reports:
      junit: tmp/screenshot/diff

test:
  stage: test
  script:
    - *bundle_npm_install
    - npm test 

# workflow:
#   rules:
#     - if: $CI_COMMIT_BRANCH == "main"
#       when: never
#   jobs:
#     - lints
#     - integration
#     - snapshot-main:
#         needs: []
#     - snapshot-branch:
#         needs: []
#     - visual-regression:
#         needs:
#           - snapshot-main
#           - snapshot-branch
